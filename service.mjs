import  Sequelize  from 'sequelize';

//getRecords, postRecord, deleteRecords, getRecord,
//headRecord, putRecord, patchRecord, deleteRecord

function valid(Model, payload){
    return Object.entries(Model.tableAttributes).reduce((valid,[name, field]) => {
        if(valid && !field._autoGenerated && !field.primaryKey && field.allowNull === false
            && !payload[name]) {
                valid = false;
            }
        return valid;
    }, true);

}


async function getRecords(Model, request, response) {
    try {
      let records = await Model.findAll();
      if(records.length > 0){
        response.status(200).json(records);
      }  else {
          response.status(204).send();
      }
    } catch (error){
        response.status(500).json(error);
    }
}
async function postRecord(Model, request, response) {
    try {
      if(valid(Model, request.body)){
        let record = await Model.create(request.body);
        response.status(201).location(`http://${request.headers.host}
        ${request.baseUrl}${request.url}${record.id}`).send();
      }  else {
          response.status(400).send();
      }
    } catch (error){
        response.status(500).json(error);
    }
}
async function getRecord(Model, request, response) {
    try {
        let record = await Model.findByPk(request.params.id);
        if(record) {
            response.json(record);
        } else {
            response.status(404).send();
        }
    } catch (error){
        response.status(500).json(error);
    }
}
async function deleteRecords(Model, request, response) {
    try {
        await Model.truncate();
        response.status(204).send();
    } catch (error){
        response.status(500).json(error);
    }
}
async function headRecord(Model, request, response) {
    try {
        response.status(await Model.findByPk(request.params.id) ? 204 : 404).send();
    } catch (error){
        response.status(500).json(error);
    }
}
async function putRecord(Model, request, response) {
    try {
        let record = await Model.findByPk(request.params.id);
        if(record) {
            if(valid(Model,request.body)){
                await record.update(request.body);
                response.status(204).send();
            } else {
                response.status(400).send();
            }
        } else {
            response.status(404).send();
        }
    } catch (error){
        response.status(500).json(error);
    }
}
async function patchRecord(Model, request, response) {
    try {
        let record = await Model.findByPk(request.params.id);
        if(record) {
            Object.entries(request.body).forEach(([name, value]) => record[name]=value);
            await record.save();
            await record.update(request.body);
            response.status(204).send();
        } else {
            response.status(404).send();
        }
    } catch (error){
        response.status(500).json(error);
    }
}
async function deleteRecord(Model, request, response) {
    try {
        let record = await Model.findByPk(request.params.id);
        if(record) {
            await record.destroy();
            response.status(204).send();
        } else {
            response.status(404).send();
        }
    } catch (error){
        response.status(500).json(error);
    }
}

export {
    getRecords, getRecord, deleteRecord, deleteRecords, 
    putRecord, postRecord, headRecord, patchRecord
}